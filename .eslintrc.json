{
    "parser": "@typescript-eslint/parser",
    "env": {
        "commonjs": true,
        "es6": true,
        "node": false,
        "browser": true
    },
    "extends": [
        "plugin:@typescript-eslint/recommended",
        "plugin:import/errors",
        "plugin:import/warnings",
        "plugin:import/typescript",
        "prettier",
        "prettier/@typescript-eslint"
    ],
    "globals": {
        "Atomics": "readonly",
        "SharedArrayBuffer": "readonly"
    },
    "parserOptions": {
        "ecmaVersion": 2020,
        "ecmaFeatures": {
            "impliedStrict": true
        }
    },
    "rules": {
        // ====================================================================
        // TypeScript Rules
        // ====================================================================
        // Allow explicit `any`s.
        "@typescript-eslint/no-explicit-any": "off",
        "@typescript-eslint/explicit-module-boundary-types": "off",
        // Ignore unused TSX parameters, since `h` will never be used normally.
        "@typescript-eslint/no-unused-vars": [
            "warn",
            {
                "varsIgnorePattern": "h"
            }
        ],
        // TypeScript handles unresolved import issues.
        "import/no-unresolved": "off",

        // ====================================================================
        // Style choices
        // ====================================================================

        // Always require semicolons.
        "semi": ["error", "always"],
        // Prefer camelCase for variable names. Use quotes to bypass this.
        "camelcase": ["warn"],

        // ====================================================================
        // Semantics
        // ====================================================================
        // Prefer constants instead of `var` or `let` when not reassigned.
        "prefer-const": [
            "error",
            {
                "destructuring": "all"
            }
        ],
        // Prevent `this` in static usages. Use the class name instead for clarity.
        "no-restricted-syntax": [
            "error",
            {
                "selector": "MethodDefinition[static = true] ThisExpression",
                "message": "`this` is being used in a static context."
            }
        ],

        // ====================================================================
        // Spacing
        // ====================================================================
        // Enforce spacing between keys and values in objects.
        "key-spacing": "warn",
        // Enforce spacing between keywords.
        "keyword-spacing": "warn",
        // Enforce spacing inside of curly brackets.
        // TODO: Conflicts with Prettier
        // "object-curly-spacing": ["warn", "always"],
        // Enforces spaces after commas.
        "comma-spacing": [
            "error",
            {
                "before": false,
                "after": true
            }
        ]
        // Prevents dangling commas at the end of arrays and objects.
        // 2022-02-08: conflicts with Prettier, disabled
        //"comma-dangle": ["warn", "never"]
    },
    "settings": {
        "import/parsers": { "@typescript-eslint/parser": [".ts", ".tsx"] }
    }
}
